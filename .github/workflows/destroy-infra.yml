name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      confirmation:
        description: 'Type "destroy" to confirm deletion'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  destroy-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    if: ${{ inputs.confirmation == 'destroy' }}
    
    steps:
      - name: Confirm Destruction
        run: |
          echo "⚠️ WARNING: Destroying infrastructure for environment: ${{ inputs.environment }}"
          echo "This action cannot be undone!"
          
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-central-1
          
      - name: Install CDK Dependencies
        run: |
          cd cdk
          npm ci
          
      - name: Destroy Infrastructure
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          HOSTED_ZONE_ID: ${{ secrets.HOSTED_ZONE_ID }}
          DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
          TARGET_ENV: ${{ inputs.environment }}
        run: |
          cd cdk
          STACK_NAME="ParkRunStack-${TARGET_ENV}"
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Aliases.Items[],\`${{ inputs.environment == 'dev' && 'parkrun-dev' || 'parkrun' }}.${DOMAIN_NAME}\`)].Id" --output text)
          
          if [ ! -z "$DISTRIBUTION_ID" ]; then
            echo "Disabling CloudFront distribution: $DISTRIBUTION_ID"
            
            CONFIG=$(aws cloudfront get-distribution-config --id $DISTRIBUTION_ID)
            ETAG=$(echo "$CONFIG" | jq -r '.ETag')
            echo "$CONFIG" | jq '.DistributionConfig.Enabled = false' > dist-config-disabled.json
            
            aws cloudfront update-distribution --id $DISTRIBUTION_ID --distribution-config file://dist-config-disabled.json --if-match "$ETAG"
            
            echo "Waiting for distribution to be disabled..."
            aws cloudfront wait distribution-deployed --id $DISTRIBUTION_ID
          fi
          
          echo "Destroying CDK stack..."
          npm run destroy -- --force